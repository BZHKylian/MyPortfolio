{"version":3,"file":"static/js/327.01cf7cc9.chunk.js","mappings":"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","sources":["components/Footer.js","components/Header.js","../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/sendForm/sendForm.js","pages/Contact.js","utils/strNoAccent.js"],"sourcesContent":["// src/componant/Header.js\nimport React from 'react';\n\nfunction Footer() {\n    return (\n        <footer>\n            <p>&copy; 2025 Kylian Houedec - Tous droits réservés.</p>\n            <p>Conçu avec ❤️ en Bretagne.</p>\n        </footer>\n    );\n}\n\nexport default Footer;\n","// src/componant/Header.js\nimport React from 'react';\nimport logo from \"../asset/img/kh.png\";\nimport { strNoAccent } from '../utils/strNoAccent';\n\nfunction Header({ project }) {\n    return (\n        <header>\n            <nav>\n                <a href=\"/\" className=\"logo\">\n                    <img src={logo} alt=\"Kylian Houedec Logo\" />\n                </a>\n                <ul>\n                    <li><a href=\"/\">À propos</a></li>\n                    <li><a href=\"/#portfolio\">Portfolio</a></li>\n                    <li><a href=\"/#contact\">Contact</a></li>\n                </ul>\n                <div className=\"menu-toggle\">☰</div>\n            </nav>\n            {project ? (\n                <p className={`${strNoAccent(project.status).toLowerCase()} projectStatus`}>\n                    {project.status}\n                </p>\n            ) : null}\n        </header>\n    );\n}\n\nexport default Header;\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, userID) => {\n    const uID = userID || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.2.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import React, { useState } from \"react\";\nimport emailjs from \"emailjs-com\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\",\n  });\n\n  const [status, setStatus] = useState(\"\");\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const userId = process.env.REACT_APP_EMAILJS_USER_ID;\n    const serviceId = process.env.REACT_APP_EMAILJS_SERVICE_ID;\n    const templateIdConfirmation = process.env.REACT_APP_EMAILJS_TEMPLATE_CONFIRMATION;\n    const templateIdMessage = process.env.REACT_APP_EMAILJS_TEMPLATE_MESSAGE;\n\n    // Envoi du premier mail (confirmation d'envoi)\n    emailjs\n      .sendForm(\n        serviceId,\n        templateIdConfirmation,\n        e.target,\n        userId\n      )\n      .then(\n        (result) => {\n          setStatus(\"Message envoyé !\");\n\n          // Envoi du second mail (message de l'utilisateur) après confirmation réussie\n          emailjs\n            .sendForm(\n              serviceId,\n              templateIdMessage,\n              e.target,\n              userId\n            )\n            .then(\n              (result) => {\n                console.log(\"Message reçu envoyé\", result);\n              },\n              (error) => {\n                console.log(\"Erreur lors de l'envoi du message reçu\", error);\n              }\n            );\n\n          // Réinitialisation du formulaire\n          setFormData({\n            name: \"\",\n            email: \"\",\n            message: \"\",\n          });\n        },\n        (error) => {\n          setStatus(\"Erreur lors de l'envoi du message.\");\n        }\n      );\n  };\n\n\n  return (\n    <>\n      <Header />\n      <div className=\"contact-page\">\n        <h2>Contactez-moi</h2>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label htmlFor=\"name\">Nom</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              required\n            />\n          </div>\n          <div>\n            <label htmlFor=\"message\">Message</label>\n            <textarea\n              id=\"message\"\n              name=\"message\"\n              value={formData.message}\n              onChange={handleChange}\n              required\n            />\n          </div>\n          <button type=\"submit\">Envoyer</button>\n        </form>\n        {status && <p id=\"status\">{status}</p>}\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Contact;\n","// Fonction pour enlever les accents des caractères\n// src/utils/strNoAccent.js\n\nexport function strNoAccent(str) {\n    if (!str) return '';  // Vérifier que str est défini\n    const accents = {\n        a: /[àáâãäå]/g,\n        e: /[èéêë]/g,\n        i: /[ìíîï]/g,\n        o: /[òóôõö]/g,\n        u: /[ùúûü]/g,\n        c: /[ç]/g,\n        n: /[ñ]/g\n    };\n\n    for (let letter in accents) {\n        str = str.replace(accents[letter], letter);\n    }\n\n    return str;\n}\n"],"names":["_jsxs","children","_jsx","_ref","project","href","className","src","logo","alt","concat","strNoAccent","status","toLowerCase","store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","sendForm","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","Contact","setFormData","useState","name","email","message","setStatus","handleChange","e","value","_objectSpread","_Fragment","Header","onSubmit","preventDefault","userId","process","serviceId","emailjs","then","result","console","log","error","htmlFor","type","id","onChange","required","Footer","str","accents","a","i","o","u","c","n","letter","replace"],"sourceRoot":""}